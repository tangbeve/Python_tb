{"models":[{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"A dictionary is a data type which stores values in pairs. For each element in the dictionary, there is a unique key that points to a value. A dictionary is mutable. It can be changed.  \nFor example:  \n\n```python\na_dict = {'one': 1} # Here 'one' is the key.  \n```  \n\n**Note**: The key of a dictionary is immutable. We cannot use a *list* as a key because a *list* is mutable. But we can make a tuple of list and use as key.  \n\n```python\na_dict['two'] = 2 # Adds key 'two' which points to 2\nprint a_dict['one']\n# prints 1  \nif 'three' in a_dict:\n    # To check whether a certain string exist as a key in the dictionary  \n    print a_dict['three']\nelse:  \n    print \"Three not there\"\n# prints Three not there\ndel a_dict['one']\n# Deletes index 'one' and the value associated with it  \nprint a_dict\n# prints {'two': 2}\n```\n    \n**Note**: A dictionary is unordered. So, only use the keys to navigate through the dictionary.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eA dictionary is a data type which stores values in pairs. For each element in the dictionary, there is a unique key that points to a value. A dictionary is mutable. It can be changed. \u003cbr\u003e\nFor example:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e'one'\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c\"\u003e# Here 'one' is the key.  \u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The key of a dictionary is immutable. We cannot use a \u003cem\u003elist\u003c/em\u003e as a key because a \u003cem\u003elist\u003c/em\u003e is mutable. But we can make a tuple of list and use as key.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'two'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"c\"\u003e# Adds key 'two' which points to 2\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'one'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints 1  \u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"s\"\u003e'three'\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# To check whether a certain string exist as a key in the dictionary  \u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'three'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s\"\u003e\"Three not there\"\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints Three not there\u003c/span\u003e\n\u003cspan class=\"k\"\u003edel\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'one'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Deletes index 'one' and the value associated with it  \u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints {'two': 2}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: A dictionary is unordered. So, only use the keys to navigate through the dictionary.\u003c/p\u003e","sidebar":""}],"total_count":66889,"solved_count":64919,"success_ratio":0.9705482216806949,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":1377,"slug":"finding-the-percentage","name":"Finding the percentage","status":null,"created_at":"2013-11-28T08:15:41.000Z","updated_at":"2018-02-07T06:48:55.000Z","kind":"code","preview":"Store a list of students and marks in a dictionary, and find the average marks obtained by a student.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9511834319526628,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"When we talk about storing multiple values in a container-like data structure, the first thing that comes to mind is a _list_.  \n\nYou can initialize a list as:  \n\n```python\narr = list()\n# or simply\narr = []\n```\n    \nor with a few elements as: \n\n```python\narr = [1,2,3]\n```\n\nElements can be accessed easily similar to most programming languages: \n\n```python\nprint arr[0]\n# result is 1\nprint arr[0] + arr[1] + arr[2]\n# result is 6\n```\n\nLists in Python are very versatile. You can add almost anything in a Python list.\n\nIn Python, you can create a list of any objects: strings, integers, or even lists. You can even add multiple types in a single list! \n\nLet's look at some of the methods you can use on list.  \n\n**1.) append(x)**  \n\nAdds a single element `x` to the end of a list.  \n\n```python\narr.append(9)   \nprint arr  \n# prints [1, 2, 3, 9]\n```\n\n**2.) extend(L)**  \n\nMerges another list `L` to the end.  \n\n```python\narr.extend([10,11])\nprint arr\n# prints [1, 2, 3, 9, 10, 11]\n```\n\n**3.) insert(i,x)**  \nInserts element `x` at position `i`.  \n\t\n```python\narr.insert(3,7)\nprint arr\n# prints [1, 2, 3, 7, 9, 10, 11]\n```\n\n**4.) remove(x)**  \nRemoves the first occurrence of element `x`.  \n\n```python  \narr.remove(10)  \narr  \n# prints [1, 2, 3, 7, 9, 11]\n```\n    \n**5.) pop()**  \nRemoves the last element of a list. If an argument is passed, that index item is popped out.   \n\n```python\ntemp = arr.pop()\nprint temp \n# prints 11\n```\n    \n**6.) index(x)**  \nReturns the first index of a value in the list. Throws an error if it's not found.  \n\n```python\ntemp = arr.index(3)\nprint temp\n# prints 2\n```\n    \n**7.) count(x)**  \nCounts the number of occurrences of an element `x`.  \n\n```python\ntemp = arr.count(1)\nprint temp\n# prints 1\n```\n\n**8.) sort()**  \nSorts the list.  \n\n```python\narr.sort()\nprint arr\n# [1, 2, 3, 7, 9]\n```\n\n**9.) reverse()**  \nReverses the list.  \n\n```python\narr.reverse()\nprint arr\n# [9, 7, 3, 2, 1]\n```","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eWhen we talk about storing multiple values in a container-like data structure, the first thing that comes to mind is a \u003cem\u003elist\u003c/em\u003e.  \u003c/p\u003e\n\n\u003cp\u003eYou can initialize a list as:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# or simply\u003c/span\u003e\n\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eor with a few elements as: \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eElements can be accessed easily similar to most programming languages: \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# result is 1\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# result is 6\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eLists in Python are very versatile. You can add almost anything in a Python list.\u003c/p\u003e\n\n\u003cp\u003eIn Python, you can create a list of any objects: strings, integers, or even lists. You can even add multiple types in a single list! \u003c/p\u003e\n\n\u003cp\u003eLet's look at some of the methods you can use on list.  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1.) append(x)\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003eAdds a single element \u003ccode\u003ex\u003c/code\u003e to the end of a list.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e   \n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e  \n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 9]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e2.) extend(L)\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003eMerges another list \u003ccode\u003eL\u003c/code\u003e to the end.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eextend\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 9, 10, 11]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e3.) insert(i,x)\u003c/strong\u003e \u003cbr\u003e\nInserts element \u003ccode\u003ex\u003c/code\u003e at position \u003ccode\u003ei\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 7, 9, 10, 11]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e4.) remove(x)\u003c/strong\u003e \u003cbr\u003e\nRemoves the first occurrence of element \u003ccode\u003ex\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003cspan class=\"n\"\u003earr\u003c/span\u003e  \n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 7, 9, 11]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e5.) pop()\u003c/strong\u003e \u003cbr\u003e\nRemoves the last element of a list. If an argument is passed, that index item is popped out.   \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e \n\u003cspan class=\"c\"\u003e# prints 11\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e6.) index(x)\u003c/strong\u003e \u003cbr\u003e\nReturns the first index of a value in the list. Throws an error if it's not found.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints 2\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e7.) count(x)\u003c/strong\u003e \u003cbr\u003e\nCounts the number of occurrences of an element \u003ccode\u003ex\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints 1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e8.) sort()\u003c/strong\u003e \u003cbr\u003e\nSorts the list.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# [1, 2, 3, 7, 9]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e9.) reverse()\u003c/strong\u003e \u003cbr\u003e\nReverses the list.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# [9, 7, 3, 2, 1]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n","sidebar":""}],"total_count":81132,"solved_count":72363,"success_ratio":0.8919168762017453,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":7888,"slug":"python-lists","name":"Lists","status":null,"created_at":"2015-04-20T10:33:57.000Z","updated_at":"2018-02-07T06:43:38.000Z","kind":"code","preview":"Perform different list operations.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"[Tuples](https://docs.python.org/3/library/stdtypes.html?#tuple) are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities.  \n\nA common tuple use is the swapping of $2$ numbers:  \n\n```python\na, b = b, a\n```\n    \nHere $a, b$ is a tuple, and it assigns itself the values of $b, a$.   \n\nAnother awesome use of tuples is as keys in a dictionary. In other words, tuples are hashable.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003e\u003ca href=\"https://docs.python.org/3/library/stdtypes.html?#tuple\"\u003eTuples\u003c/a\u003e are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities.  \u003c/p\u003e\n\n\u003cp\u003eA common tuple use is the swapping of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e numbers:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eHere \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.261ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 1404.2 1080.4\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(974,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e is a tuple, and it assigns itself the values of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.261ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 1404.2 1080.4\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(874,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.   \u003c/p\u003e\n\n\u003cp\u003eAnother awesome use of tuples is as keys in a dictionary. In other words, tuples are hashable.\u003c/p\u003e","sidebar":""}],"total_count":74933,"solved_count":73526,"success_ratio":0.9812232260819665,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":7889,"slug":"python-tuples","name":"Tuples ","status":null,"created_at":"2015-04-20T10:37:11.000Z","updated_at":"2018-02-07T06:45:52.000Z","kind":"code","preview":"Learn about tuples and compute hash(T).","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":67400,"solved_count":66372,"success_ratio":0.9847477744807122,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":9870,"slug":"swap-case","name":"sWAP cASE","status":null,"created_at":"2015-08-18T10:48:14.000Z","updated_at":"2018-02-07T07:06:43.000Z","kind":"code","preview":"Swap the letter cases of a given string. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":69601,"solved_count":68739,"success_ratio":0.987615120472407,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":8057,"slug":"python-string-split-and-join","name":"String Split and Join","status":null,"created_at":"2015-04-28T16:45:52.000Z","updated_at":"2017-01-26T01:54:14.000Z","kind":"code","preview":"Use Python's split and join methods on the input string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":93025,"solved_count":91175,"success_ratio":0.9801128728836335,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":1371,"slug":"whats-your-name","name":"What's Your Name?","status":null,"created_at":"2013-11-28T07:58:23.000Z","updated_at":"2018-02-07T06:44:19.000Z","kind":"code","preview":"Python string practice: Print your name in the console.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9299397920087575,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","Python Tutorials","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":64272,"solved_count":63005,"success_ratio":0.9802869056509833,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":7890,"slug":"python-mutations","name":"Mutations","status":null,"created_at":"2015-04-20T10:43:55.000Z","updated_at":"2016-12-13T10:05:10.000Z","kind":"code","preview":"Understand immutable vs mutable by making changes to a given string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":57378,"solved_count":53928,"success_ratio":0.9398724249712433,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":1373,"slug":"find-a-string","name":"Find a string","status":null,"created_at":"2013-11-28T08:08:59.000Z","updated_at":"2016-12-22T03:17:27.000Z","kind":"code","preview":"Find the number of occurrences of a substring in a string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9328358208955224,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","Python Tutorials","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":47996,"solved_count":45246,"success_ratio":0.9427035586298859,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":11742,"slug":"string-validators","name":"String Validators","status":null,"created_at":"2015-08-27T12:00:28.000Z","updated_at":"2017-04-10T09:13:52.000Z","kind":"code","preview":"Identify the presence of alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters in a string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist tutorial","Core CS","Language-Specific"]},{"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":37392,"solved_count":36821,"success_ratio":0.9847293538724861,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":9953,"slug":"text-alignment","name":"Text Alignment","status":null,"created_at":"2015-08-21T07:22:15.000Z","updated_at":"2016-12-08T08:33:26.000Z","kind":"code","preview":"Generate the Hackerrank logo with alignments in Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist tutorials","Core CS","Language-Specific"]}],"first_unsolved_challenge":{"solved":false,"attempted":false,"can_be_viewed":true,"can_edit":null,"bookmarked":false,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"In this challenge, we test your knowledge of using *if-else* conditional statements to automate decision-making processes. An if-else statement has the following logical flow:\n\n![Wikipedia if-else flow chart](https://s3.amazonaws.com/hr-challenge-images/13689/1446563087-4ec019a919-332px-If-Then-Else-diagram.svg.png)\n\n\u003csub\u003eSource: [Wikipedia](https://en.wikipedia.org/wiki/Conditional_(computer_programming))\u003c/sub\u003e","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eIn this challenge, we test your knowledge of using \u003cem\u003eif-else\u003c/em\u003e conditional statements to automate decision-making processes. An if-else statement has the following logical flow:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/hr-challenge-images/13689/1446563087-4ec019a919-332px-If-Then-Else-diagram.svg.png\" alt=\"Wikipedia if-else flow chart\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csub\u003eSource: \u003ca href=\"https://en.wikipedia.org/wiki/Conditional_%28computer_programming%29\"\u003eWikipedia\u003c/a\u003e\u003c/sub\u003e\u003c/p\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/py-if-else/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":205070,"solved_count":187110,"success_ratio":0.9124201492173404,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":22447,"slug":"py-if-else","name":"Python If-Else","status":null,"created_at":"2016-06-24T04:49:03.000Z","updated_at":"2018-07-02T07:21:08.000Z","kind":"code","preview":"Practice using if-else conditional statements!","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Easy","python","Core CS","Language-Specific"]},"total":115,"tutorial_signed_up":true,"current_track":{"id":12,"name":"Python","slug":"python","priority":8,"descriptions":"A step by step guide to Python, a language that is easy to pick up yet one of the most powerful.","rewards_system_enabled":null},"promo":{"meta":null,"type":"other"}}