{"status":true,"model":{"solved":false,"attempted":false,"can_be_viewed":true,"can_edit":null,"dynamic":true,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":522273,"solved_count":490424,"success_ratio":0.9390184826709403,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0.0,"id":21400,"slug":"compare-the-triplets","name":"Compare the Triplets","status":null,"created_at":"2016-05-11T15:19:11.000Z","updated_at":"2018-07-18T14:46:00.000Z","kind":"code","preview":"Compare the elements in two triplets.","codechecker_handle":null,"category":"ai","deleted":false,"company_id":null,"difficulty_score":"0.0","migrated_resource":null,"level":50,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"languages":["c","clojure","cpp","cpp14","csharp","erlang","go","haskell","java","java8","javascript","kotlin","lua","objectivec","perl","php","pypy","python","pypy3","python3","ruby","scala","swift"],"is_text":false,"custom":false,"track":{"id":43,"name":"Warmup","slug":"warmup","track_id":3,"track_name":"Algorithms","track_slug":"algorithms","domain_score":0.0},"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"primary_contest":{"id":7238,"name":"May World CodeSprint","slug":"may-world-codesprint","created_at":"2016-04-26T17:39:21.000Z","updated_at":"2016-05-26T18:58:11.000Z","starttime":"2016-05-21T16:00:00.000Z","endtime":"2016-05-22T16:00:00.000Z","timezone":"PST","homepage":null,"tagline":null,"description":"Join May World CodeSprint to prove your coding skills, win $15,000 in prizes and get discovered by companies. Beginning May 21th @ 9am PST, developers from around the world will have 24 hours to solve 8 CodeChallenges. ","homepage_background_color":null,"notification":null,"template_id":478,"expose_stats":null,"public":true,"team_event":false,"rating_category":"Algorithms","is_rating_updated":true,"leaderboard_backend":null,"leaderboard_format":"","primary_track_id":3,"college_public":false,"rated":true,"is_multi_round":false,"parent_contest_id":null,"primary_tag_id":3081,"started":true,"ended":true,"epoch_endtime":1463932800,"epoch_starttime":1463846400,"time_left":-71818736.71702518,"hide_difficulty":null,"has_tracks":null,"archived":true,"leaderboard_type":"country","kind":"","leaderboard_freeze_time":null,"show_penalty":true,"track":{"id":3,"name":"Algorithms","slug":"algorithms","priority":14,"descriptions":"The true test of problem solving: when one realizes that time and memory aren't infinite.\n","rewards_system_enabled":true},"hide_navigation":null,"contest_broadcast":null,"hide_leaderboard":null,"hide_submissions":null,"leaderboard_out_of_sync":null,"leaderboard_out_of_sync_message":null,"challenges_count":8,"show_participants_info":null,"custom_leaderboard_column_name":null,"disable_forum":null,"disable_fsi":null,"has_codesprint_reg_page":true,"hidden":null,"comment_live_sync":null,"company_associated_contest":null,"limited_participants":false,"leaderboard_broadcast_message":null,"qualification_rule_type":null,"qualification_rule_value":0,"qualification_rule_msg":null,"migration_status":null,"migration_disabled":null,"testers_contest":null,"time_limited_contest":false,"hacker_timelimit":null,"school_leaderboard_enabled":false,"organization_type":null,"organization_name":null,"effective_time_left":-71818736.71952324,"effective_epoch_endtime":1463932800},"solved_score":0.5,"available_translations":[],"leaderboard_out_of_sync":null,"leaderboard_out_of_sync_message":null,"require_unlock":true,"show_skeliton":null,"difficulty_name":"Easy","default_language":null,"c_template":"// Complete the compareTriplets function below.\n\n/*\n * To return the integer array from the function, you should:\n *     - Store the size of the array to be returned in the result_count variable\n *     - Allocate the array statically or dynamically\n *\n * For example,\n * int* return_integer_array_using_static_allocation(int* result_count) {\n *     *result_count = 5;\n *\n *     static int a[5] = {1, 2, 3, 4, 5};\n *\n *     return a;\n * }\n *\n * int* return_integer_array_using_dynamic_allocation(int* result_count) {\n *     *result_count = 5;\n *\n *     int *a = malloc(5 * sizeof(int));\n *\n *     for (int i = 0; i \u003c 5; i++) {\n *         *(a + i) = i + 1;\n *     }\n *\n *     return a;\n * }\n *\n */\nint* compareTriplets(int a_count, int* a, int b_count, int* b, int* result_count) {\n\n\n}\n\n","c_template_head":"#include \u003cassert.h\u003e\n#include \u003cctype.h\u003e\n#include \u003climits.h\u003e\n#include \u003cmath.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstddef.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\nchar* readline();\nchar* ltrim(char*);\nchar* rtrim(char*);\nchar** split_string(char*);\n\n","c_template_tail":"int main()\n{\n    FILE* fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n    char** a_temp = split_string(rtrim(readline()));\n\n    int* a = malloc(3 * sizeof(int));\n\n    for (int i = 0; i \u003c 3; i++) {\n        char* a_item_endptr;\n        char* a_item_str = *(a_temp + i);\n        int a_item = strtol(a_item_str, \u0026a_item_endptr, 10);\n\n        if (a_item_endptr == a_item_str || *a_item_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        *(a + i) = a_item;\n    }\n\n    int a_count = 3;\n\n    char** b_temp = split_string(rtrim(readline()));\n\n    int* b = malloc(3 * sizeof(int));\n\n    for (int i = 0; i \u003c 3; i++) {\n        char* b_item_endptr;\n        char* b_item_str = *(b_temp + i);\n        int b_item = strtol(b_item_str, \u0026b_item_endptr, 10);\n\n        if (b_item_endptr == b_item_str || *b_item_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        *(b + i) = b_item;\n    }\n\n    int b_count = 3;\n\n    int result_count;\n    int* result = compareTriplets(a_count, a, b_count, b, \u0026result_count);\n\n    for (int i = 0; i \u003c result_count; i++) {\n        fprintf(fptr, \"%d\", *(result + i));\n\n        if (i != result_count - 1) {\n            fprintf(fptr, \" \");\n        }\n    }\n\n    fprintf(fptr, \"\\n\");\n\n    fclose(fptr);\n\n    return 0;\n}\n\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n    char* data = malloc(alloc_length);\n\n    while (true) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, stdin);\n\n        if (!line) {\n            break;\n        }\n\n        data_length += strlen(cursor);\n\n        if (data_length \u003c alloc_length - 1 || data[data_length - 1] == '\\n') {\n            break;\n        }\n\n        alloc_length \u003c\u003c= 1;\n\n        data = realloc(data, alloc_length);\n\n        if (!data) {\n            data = '\\0';\n\n            break;\n        }\n    }\n\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n\n        data = realloc(data, data_length);\n\n        if (!data) {\n            data = '\\0';\n        }\n    } else {\n        data = realloc(data, data_length + 1);\n\n        if (!data) {\n            data = '\\0';\n        } else {\n            data[data_length] = '\\0';\n        }\n    }\n\n    return data;\n}\n\nchar* ltrim(char* str) {\n    if (!str) {\n        return '\\0';\n    }\n\n    if (!*str) {\n        return str;\n    }\n\n    while (*str != '\\0' \u0026\u0026 isspace(*str)) {\n        str++;\n    }\n\n    return str;\n}\n\nchar* rtrim(char* str) {\n    if (!str) {\n        return '\\0';\n    }\n\n    if (!*str) {\n        return str;\n    }\n\n    char* end = str + strlen(str) - 1;\n\n    while (end \u003e= str \u0026\u0026 isspace(*end)) {\n        end--;\n    }\n\n    *(end + 1) = '\\0';\n\n    return str;\n}\n\nchar** split_string(char* str) {\n    char** splits = NULL;\n    char* token = strtok(str, \" \");\n\n    int spaces = 0;\n\n    while (token) {\n        splits = realloc(splits, sizeof(char*) * ++spaces);\n\n        if (!splits) {\n            return splits;\n        }\n\n        splits[spaces - 1] = token;\n\n        token = strtok(NULL, \" \");\n    }\n\n    return splits;\n}\n","cpp_template":"// Complete the compareTriplets function below.\nvector\u003cint\u003e compareTriplets(vector\u003cint\u003e a, vector\u003cint\u003e b) {\n\n\n}\n\n","cpp_template_head":"#include \u003cbits/stdc++.h\u003e\n\nusing namespace std;\n\nstring ltrim(const string \u0026);\nstring rtrim(const string \u0026);\nvector\u003cstring\u003e split(const string \u0026);\n\n","cpp_template_tail":"int main()\n{\n    ofstream fout(getenv(\"OUTPUT_PATH\"));\n\n    string a_temp_temp;\n    getline(cin, a_temp_temp);\n\n    vector\u003cstring\u003e a_temp = split(rtrim(a_temp_temp));\n\n    vector\u003cint\u003e a(3);\n\n    for (int i = 0; i \u003c 3; i++) {\n        int a_item = stoi(a_temp[i]);\n\n        a[i] = a_item;\n    }\n\n    string b_temp_temp;\n    getline(cin, b_temp_temp);\n\n    vector\u003cstring\u003e b_temp = split(rtrim(b_temp_temp));\n\n    vector\u003cint\u003e b(3);\n\n    for (int i = 0; i \u003c 3; i++) {\n        int b_item = stoi(b_temp[i]);\n\n        b[i] = b_item;\n    }\n\n    vector\u003cint\u003e result = compareTriplets(a, b);\n\n    for (int i = 0; i \u003c result.size(); i++) {\n        fout \u003c\u003c result[i];\n\n        if (i != result.size() - 1) {\n            fout \u003c\u003c \" \";\n        }\n    }\n\n    fout \u003c\u003c \"\\n\";\n\n    fout.close();\n\n    return 0;\n}\n\nstring ltrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        s.begin(),\n        find_if(s.begin(), s.end(), not1(ptr_fun\u003cint, int\u003e(isspace)))\n    );\n\n    return s;\n}\n\nstring rtrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        find_if(s.rbegin(), s.rend(), not1(ptr_fun\u003cint, int\u003e(isspace))).base(),\n        s.end()\n    );\n\n    return s;\n}\n\nvector\u003cstring\u003e split(const string \u0026str) {\n    vector\u003cstring\u003e tokens;\n\n    string::size_type start = 0;\n    string::size_type end = 0;\n\n    while ((end = str.find(\" \", start)) != string::npos) {\n        tokens.push_back(str.substr(start, end - start));\n\n        start = end + 1;\n    }\n\n    tokens.push_back(str.substr(start));\n\n    return tokens;\n}\n","java_template":"    // Complete the compareTriplets function below.\n    static List\u003cInteger\u003e compareTriplets(List\u003cInteger\u003e a, List\u003cInteger\u003e b) {\n\n\n    }\n\n","java_template_head":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n","java_template_tail":"    public static void main(String[] args) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] aItems = bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\").split(\" \");\n\n        List\u003cInteger\u003e a = new ArrayList\u003c\u003e();\n\n        for (int i = 0; i \u003c 3; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a.add(aItem);\n        }\n\n        String[] bItems = bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\").split(\" \");\n\n        List\u003cInteger\u003e b = new ArrayList\u003c\u003e();\n\n        for (int i = 0; i \u003c 3; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b.add(bItem);\n        }\n\n        List\u003cInteger\u003e result = compareTriplets(a, b);\n\n        for (int i = 0; i \u003c result.size(); i++) {\n            bufferedWriter.write(String.valueOf(result.get(i)));\n\n            if (i != result.size() - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedReader.close();\n        bufferedWriter.close();\n    }\n}\n","csharp_template":"    // Complete the compareTriplets function below.\n    static List\u003cint\u003e compareTriplets(List\u003cint\u003e a, List\u003cint\u003e b) {\n\n\n    }\n\n","csharp_template_head":"using System.CodeDom.Compiler;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Text.RegularExpressions;\nusing System.Text;\nusing System;\n\nclass Solution {\n\n","csharp_template_tail":"    static void Main(string[] args) {\n        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\"), true);\n\n        List\u003cint\u003e a = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(aTemp =\u003e Convert.ToInt32(aTemp)).ToList();\n\n        List\u003cint\u003e b = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(bTemp =\u003e Convert.ToInt32(bTemp)).ToList();\n\n        List\u003cint\u003e result = compareTriplets(a, b);\n\n        textWriter.WriteLine(String.Join(\" \", result));\n\n        textWriter.Flush();\n        textWriter.Close();\n    }\n}\n","php_template":"// Complete the compareTriplets function below.\nfunction compareTriplets($a, $b) {\n\n\n}\n\n","php_template_head":"\u003c?php\n\n","php_template_tail":"$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$a_temp = rtrim(fgets(STDIN));\n\n$a = array_map('intval', preg_split('/ /', $a_temp, -1, PREG_SPLIT_NO_EMPTY));\n\n$b_temp = rtrim(fgets(STDIN));\n\n$b = array_map('intval', preg_split('/ /', $b_temp, -1, PREG_SPLIT_NO_EMPTY));\n\n$result = compareTriplets($a, $b);\n\nfwrite($fptr, implode(\" \", $result) . \"\\n\");\n\nfclose($fptr);\n","ruby_template":"# Complete the compareTriplets function below.\ndef compareTriplets(a, b)\n\n\nend\n\n","ruby_template_head":"#!/bin/ruby\n\nrequire 'json'\nrequire 'stringio'\n\n","ruby_template_tail":"fptr = File.open(ENV['OUTPUT_PATH'], 'w')\n\na = gets.rstrip.split.map(\u0026:to_i)\n\nb = gets.rstrip.split.map(\u0026:to_i)\n\nresult = compareTriplets a, b\n\nfptr.write result.join \" \"\nfptr.write \"\\n\"\n\nfptr.close()\n","python_template":"# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n\n","python_template_head":"#!/bin/python\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","python_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = map(int, raw_input().rstrip().split())\n\n    b = map(int, raw_input().rstrip().split())\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","perl_template":"# Complete the compareTriplets function below.\nsub compareTriplets {\n\n\n}\n\n","perl_template_head":"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n","perl_template_tail":"open(my $fptr, '\u003e', $ENV{'OUTPUT_PATH'});\n\nmy $a = rtrim(my $a_temp = \u003cSTDIN\u003e);\n\nmy @a = split /\\s+/, $a;\n\nmy $b = rtrim(my $b_temp = \u003cSTDIN\u003e);\n\nmy @b = split /\\s+/, $b;\n\nmy @result = compareTriplets \\@a, \\@b;\n\nprint $fptr join \" \", @result;\nprint $fptr \"\\n\";\n\nclose $fptr;\n\nsub ltrim {\n    my $str = shift;\n\n    $str =~ s/^\\s+//;\n\n    return $str;\n}\n\nsub rtrim {\n    my $str = shift;\n\n    $str =~ s/\\s+$//;\n\n    return $str;\n}\n","haskell_template":"-- Complete the compareTriplets function below.\ncompareTriplets a b = do\n\n","haskell_template_head":"{-# LANGUAGE DuplicateRecordFields, FlexibleInstances, UndecidableInstances #-}\n\nmodule Main where\n\nimport Control.Monad\nimport Data.Array\nimport Data.Bits\nimport Data.List\nimport Data.List.Split\nimport Data.Set\nimport Data.Text\nimport Debug.Trace\nimport System.Environment\nimport System.IO\nimport System.IO.Unsafe\n\n","haskell_template_tail":"lstrip = Data.Text.unpack . Data.Text.stripStart . Data.Text.pack\nrstrip = Data.Text.unpack . Data.Text.stripEnd . Data.Text.pack\n\nmain :: IO()\nmain = do\n    stdout \u003c- getEnv \"OUTPUT_PATH\"\n    fptr \u003c- openFile stdout WriteMode\n\n    aTemp \u003c- getLine\n\n    let a = Data.List.map (read :: String -\u003e Int) . Data.List.words $ rstrip aTemp\n\n    bTemp \u003c- getLine\n\n    let b = Data.List.map (read :: String -\u003e Int) . Data.List.words $ rstrip bTemp\n\n    let result = compareTriplets a b\n\n    hPutStrLn fptr $ Data.List.intercalate \" \" $ Data.List.map (\\x -\u003e show x) $ result\n\n    hFlush fptr\n    hClose fptr\n","clojure_template":"; Complete the compareTriplets function below.\n(defn compareTriplets [a b]\n\n\n)\n\n","clojure_template_head":"","clojure_template_tail":"(def fptr (get (System/getenv) \"OUTPUT_PATH\"))\n\n(def a (vec (map #(Integer/parseInt %) (clojure.string/split (clojure.string/trimr (read-line)) #\" \"))))\n\n(def b (vec (map #(Integer/parseInt %) (clojure.string/split (clojure.string/trimr (read-line)) #\" \"))))\n\n(def result (compareTriplets a b))\n\n(spit fptr (clojure.string/join \" \" result) :append true)\n(spit fptr \"\\n\" :append true)\n","scala_template":"    // Complete the compareTriplets function below.\n    def compareTriplets(a: Array[Int], b: Array[Int]): Array[Int] = {\n\n\n    }\n\n","scala_template_head":"import java.io._\nimport java.math._\nimport java.security._\nimport java.text._\nimport java.util._\nimport java.util.concurrent._\nimport java.util.function._\nimport java.util.regex._\nimport java.util.stream._\nimport scala.collection.immutable._\nimport scala.collection.mutable._\nimport scala.collection.concurrent._\nimport scala.collection.parallel.immutable._\nimport scala.collection.parallel.mutable._\nimport scala.concurrent._\nimport scala.io._\nimport scala.math._\nimport scala.sys._\nimport scala.util.matching._\nimport scala.reflect._\n\nobject Solution {\n\n","scala_template_tail":"    def main(args: Array[String]) {\n        val printWriter = new PrintWriter(sys.env(\"OUTPUT_PATH\"))\n\n        val a = StdIn.readLine.replaceAll(\"\\\\s+$\", \"\").split(\" \").map(_.trim.toInt)\n\n        val b = StdIn.readLine.replaceAll(\"\\\\s+$\", \"\").split(\" \").map(_.trim.toInt)\n        val result = compareTriplets(a, b)\n\n        printWriter.println(result.mkString(\" \"))\n\n        printWriter.close()\n    }\n}\n","lua_template":"-- Complete the compareTriplets function below.\nfunction compareTriplets(a, b)\n\n\nend\n\n","lua_template_head":"","lua_template_tail":"local fptr = io.open(os.getenv(\"OUTPUT_PATH\"), \"w\")\n\nlocal a = {}\n\nfor token in string.gmatch(io.stdin:read(\"*l\"):gsub(\"%s+$\", \"\"), \"[^%s]+\") do\n    table.insert(a, tonumber(token))\nend\n\nlocal b = {}\n\nfor token in string.gmatch(io.stdin:read(\"*l\"):gsub(\"%s+$\", \"\"), \"[^%s]+\") do\n    table.insert(b, tonumber(token))\nend\n\nlocal result = compareTriplets(a, b)\n\nfptr:write(table.concat(result, \" \"))\n\nfptr:write(\"\\n\")\n\nfptr:close()\n","erlang_template":"% Complete the compareTriplets function below.\ncompareTriplets(A, B) -\u003e\n\n","erlang_template_head":"-module(solution).\n-export([main/0]).\n-import(os, [getenv/1]).\n\n","erlang_template_tail":"main() -\u003e\n    {ok, Fptr} = file:open(getenv(\"OUTPUT_PATH\"), [write]),\n\n    ATemp = re:split(re:replace(io:get_line(\"\"), \"\\\\s+$\", \"\", [global, {return, list}]), \"\\\\s+\", [{return, list}]),\n\n    A = lists:map(fun(X) -\u003e {I, _} = string:to_integer(re:replace(X, \"(^\\\\s+)|(\\\\s+$)\", \"\", [global, {return, list}])), I end, ATemp),\n\n    BTemp = re:split(re:replace(io:get_line(\"\"), \"\\\\s+$\", \"\", [global, {return, list}]), \"\\\\s+\", [{return, list}]),\n\n    B = lists:map(fun(X) -\u003e {I, _} = string:to_integer(re:replace(X, \"(^\\\\s+)|(\\\\s+$)\", \"\", [global, {return, list}])), I end, BTemp),\n\n    Result = compareTriplets(A, B),\n\n    io:fwrite(Fptr, \"~s~n\", [lists:join(\" \", lists:map(fun(X) -\u003e integer_to_list(X) end, Result))]),\n\n    file:close(Fptr),\n\n    ok.\n","javascript_template":"// Complete the compareTriplets function below.\nfunction compareTriplets(a, b) {\n\n\n}\n\n","javascript_template_head":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n","javascript_template_tail":"function main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const b = readLine().replace(/\\s+$/g, '').split(' ').map(bTemp =\u003e parseInt(bTemp, 10));\n\n    const result = compareTriplets(a, b);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","go_template":"// Complete the compareTriplets function below.\nfunc compareTriplets(a []int32, b []int32) []int32 {\n\n\n}\n\n","go_template_head":"package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\n","go_template_tail":"func main() {\n    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)\n\n    stdout, err := os.Create(os.Getenv(\"OUTPUT_PATH\"))\n    checkError(err)\n\n    defer stdout.Close()\n\n    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)\n\n    aTemp := strings.Split(strings.TrimSpace(readLine(reader)), \" \")\n\n    var a []int32\n\n    for i := 0; i \u003c 3; i++ {\n        aItemTemp, err := strconv.ParseInt(aTemp[i], 10, 64)\n        checkError(err)\n        aItem := int32(aItemTemp)\n        a = append(a, aItem)\n    }\n\n    bTemp := strings.Split(strings.TrimSpace(readLine(reader)), \" \")\n\n    var b []int32\n\n    for i := 0; i \u003c 3; i++ {\n        bItemTemp, err := strconv.ParseInt(bTemp[i], 10, 64)\n        checkError(err)\n        bItem := int32(bItemTemp)\n        b = append(b, bItem)\n    }\n\n    result := compareTriplets(a, b)\n\n    for i, resultItem := range result {\n        fmt.Fprintf(writer, \"%d\", resultItem)\n\n        if i != len(result) - 1 {\n            fmt.Fprintf(writer, \" \")\n        }\n    }\n\n    fmt.Fprintf(writer, \"\\n\")\n\n    writer.Flush()\n}\n\nfunc readLine(reader *bufio.Reader) string {\n    str, _, err := reader.ReadLine()\n    if err == io.EOF {\n        return \"\"\n    }\n\n    return strings.TrimRight(string(str), \"\\r\\n\")\n}\n\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n","python3_template":"# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n\n","python3_template_head":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","python3_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","objectivec_template":"@interface Solution:NSObject\n- (NSArray *) compareTriplets:(NSArray *)a b:(NSArray *)b;\n@end\n\n@implementation Solution\n// Complete the compareTriplets function below.\n- (NSArray *) compareTriplets:(NSArray *)a b:(NSArray *)b {\n\n\n}\n\n@end\n\n","objectivec_template_head":"#import \u003cFoundation/Foundation.h\u003e\n#import \u003cobjc/Object.h\u003e\n#import \u003cobjc/objc.h\u003e\n\n@interface NSString (StringByTrimmingTrailingCharactersInSet)\n- (NSString *) stringByTrimmingTrailingCharactersInSet:(NSCharacterSet *)characterSet;\n@end\n\n@implementation NSString (StringByTrimmingTrailingCharactersInSet)\n- (NSString *) stringByTrimmingTrailingCharactersInSet:(NSCharacterSet *)characterSet {\n    NSRange end = [self rangeOfCharacterFromSet:[characterSet invertedSet] options:NSBackwardsSearch];\n\n    if (end.location == NSNotFound) {\n        return @\"\";\n    }\n\n    return [self substringToIndex:end.location + 1];\n}\n@end\n\n@interface NSString (NumberFromString)\n- (NSNumber *) numberFromString:(NSNumberFormatter *)formatter;\n@end\n\n@implementation NSString (NumberFromString)\n- (NSNumber *) numberFromString:(NSNumberFormatter *)formatter {\n    NSNumber *number = [formatter numberFromString:[self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];\n\n    if (number == nil) {\n        [NSException raise:@\"Bad Input\" format:@\"%@\", self];\n    }\n\n    return number;\n}\n@end\n\n@interface NSString (ArrayFromString)\n- (NSArray *) arrayFromString;\n@end\n\n@implementation NSString (ArrayFromString)\n- (NSArray *) arrayFromString {\n    return [[self stringByTrimmingTrailingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] componentsSeparatedByString:@\" \"];\n}\n@end\n\n","objectivec_template_tail":"int main(int argc, const char* argv[]) {\n    @autoreleasepool {\n        NSString *stdout = [[[NSProcessInfo processInfo] environment] objectForKey:@\"OUTPUT_PATH\"];\n        [[NSFileManager defaultManager] createFileAtPath:stdout contents:nil attributes:nil];\n        NSFileHandle *fileHandle = [NSFileHandle fileHandleForWritingAtPath:stdout];\n\n        NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];\n\n        NSData *availableInputData = [[NSFileHandle fileHandleWithStandardInput] availableData];\n        NSString *availableInputString = [[NSString alloc] initWithData:availableInputData encoding:NSUTF8StringEncoding];\n        NSArray *availableInputArray = [availableInputString componentsSeparatedByString:@\"\\n\"];\n\n        NSUInteger currentInputLine = 0;\n\n        NSArray *aTemp = [[[availableInputArray objectAtIndex:currentInputLine] stringByTrimmingTrailingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] componentsSeparatedByString:@\" \"];\n        currentInputLine += 1;\n\n        NSMutableArray *aTempMutable = [NSMutableArray arrayWithCapacity:3];\n\n        for (NSString *aItem in aTemp) {\n            [aTempMutable addObject:[aItem numberFromString:numberFormatter]];\n        }\n\n        NSArray *a = [aTempMutable copy];\n\n        NSArray *bTemp = [[[availableInputArray objectAtIndex:currentInputLine] stringByTrimmingTrailingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] componentsSeparatedByString:@\" \"];\n        currentInputLine += 1;\n\n        NSMutableArray *bTempMutable = [NSMutableArray arrayWithCapacity:3];\n\n        for (NSString *bItem in bTemp) {\n            [bTempMutable addObject:[bItem numberFromString:numberFormatter]];\n        }\n\n        NSArray *b = [bTempMutable copy];\n\n        NSArray *result = [[[Solution alloc] init] compareTriplets:a b:b];\n\n        [fileHandle writeData:[[result componentsJoinedByString:@\" \"] dataUsingEncoding:NSUTF8StringEncoding]];\n        [fileHandle writeData:[@\"\\n\" dataUsingEncoding:NSUTF8StringEncoding]];\n\n        [fileHandle closeFile];\n    }\n\n    return 0;\n}\n","java8_template":"    // Complete the compareTriplets function below.\n    static List\u003cInteger\u003e compareTriplets(List\u003cInteger\u003e a, List\u003cInteger\u003e b) {\n\n\n    }\n\n","java8_template_head":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.function.*;\nimport java.util.regex.*;\nimport java.util.stream.*;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\n\npublic class Solution {\n\n","java8_template_tail":"    public static void main(String[] args) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        List\u003cInteger\u003e a = Stream.of(bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\").split(\" \"))\n            .map(Integer::parseInt)\n            .collect(toList());\n\n        List\u003cInteger\u003e b = Stream.of(bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\").split(\" \"))\n            .map(Integer::parseInt)\n            .collect(toList());\n\n        List\u003cInteger\u003e result = compareTriplets(a, b);\n\n        bufferedWriter.write(\n            result.stream()\n                .map(Object::toString)\n                .collect(joining(\" \"))\n            + \"\\n\"\n        );\n\n        bufferedReader.close();\n        bufferedWriter.close();\n    }\n}\n","swift_template":"// Complete the compareTriplets function below.\nfunc compareTriplets(a: [Int], b: [Int]) -\u003e [Int] {\n\n\n}\n\n","swift_template_head":"import Foundation\n\n","swift_template_tail":"let stdout = ProcessInfo.processInfo.environment[\"OUTPUT_PATH\"]!\nFileManager.default.createFile(atPath: stdout, contents: nil, attributes: nil)\nlet fileHandle = FileHandle(forWritingAtPath: stdout)!\n\nguard let aTemp = readLine()?.replacingOccurrences(of: \"\\\\s+$\", with: \"\", options: .regularExpression) else { fatalError(\"Bad input\") }\nlet a: [Int] = aTemp.split(separator: \" \").map {\n    if let aItem = Int($0) {\n        return aItem\n    } else { fatalError(\"Bad input\") }\n}\n\nguard a.count == 3 else { fatalError(\"Bad input\") }\n\nguard let bTemp = readLine()?.replacingOccurrences(of: \"\\\\s+$\", with: \"\", options: .regularExpression) else { fatalError(\"Bad input\") }\nlet b: [Int] = bTemp.split(separator: \" \").map {\n    if let bItem = Int($0) {\n        return bItem\n    } else { fatalError(\"Bad input\") }\n}\n\nguard b.count == 3 else { fatalError(\"Bad input\") }\n\nlet result = compareTriplets(a: a, b: b)\n\nfileHandle.write(result.map{ String($0) }.joined(separator: \" \").data(using: .utf8)!)\nfileHandle.write(\"\\n\".data(using: .utf8)!)\n","cpp14_template":"// Complete the compareTriplets function below.\nvector\u003cint\u003e compareTriplets(vector\u003cint\u003e a, vector\u003cint\u003e b) {\n\n\n}\n\n","cpp14_template_head":"#include \u003cbits/stdc++.h\u003e\n\nusing namespace std;\n\nstring ltrim(const string \u0026);\nstring rtrim(const string \u0026);\nvector\u003cstring\u003e split(const string \u0026);\n\n","cpp14_template_tail":"int main()\n{\n    ofstream fout(getenv(\"OUTPUT_PATH\"));\n\n    string a_temp_temp;\n    getline(cin, a_temp_temp);\n\n    vector\u003cstring\u003e a_temp = split(rtrim(a_temp_temp));\n\n    vector\u003cint\u003e a(3);\n\n    for (int i = 0; i \u003c 3; i++) {\n        int a_item = stoi(a_temp[i]);\n\n        a[i] = a_item;\n    }\n\n    string b_temp_temp;\n    getline(cin, b_temp_temp);\n\n    vector\u003cstring\u003e b_temp = split(rtrim(b_temp_temp));\n\n    vector\u003cint\u003e b(3);\n\n    for (int i = 0; i \u003c 3; i++) {\n        int b_item = stoi(b_temp[i]);\n\n        b[i] = b_item;\n    }\n\n    vector\u003cint\u003e result = compareTriplets(a, b);\n\n    for (int i = 0; i \u003c result.size(); i++) {\n        fout \u003c\u003c result[i];\n\n        if (i != result.size() - 1) {\n            fout \u003c\u003c \" \";\n        }\n    }\n\n    fout \u003c\u003c \"\\n\";\n\n    fout.close();\n\n    return 0;\n}\n\nstring ltrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        s.begin(),\n        find_if(s.begin(), s.end(), not1(ptr_fun\u003cint, int\u003e(isspace)))\n    );\n\n    return s;\n}\n\nstring rtrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        find_if(s.rbegin(), s.rend(), not1(ptr_fun\u003cint, int\u003e(isspace))).base(),\n        s.end()\n    );\n\n    return s;\n}\n\nvector\u003cstring\u003e split(const string \u0026str) {\n    vector\u003cstring\u003e tokens;\n\n    string::size_type start = 0;\n    string::size_type end = 0;\n\n    while ((end = str.find(\" \", start)) != string::npos) {\n        tokens.push_back(str.substr(start, end - start));\n\n        start = end + 1;\n    }\n\n    tokens.push_back(str.substr(start));\n\n    return tokens;\n}\n","pypy_template":"# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n\n","pypy_template_head":"#!/bin/python\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","pypy_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = map(int, raw_input().rstrip().split())\n\n    b = map(int, raw_input().rstrip().split())\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","pypy3_template":"# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n\n","pypy3_template_head":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","pypy3_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","kotlin_template":"// Complete the compareTriplets function below.\nfun compareTriplets(a: Array\u003cInt\u003e, b: Array\u003cInt\u003e): Array\u003cInt\u003e {\n\n\n}\n\n","kotlin_template_head":"import java.io.*\nimport java.math.*\nimport java.security.*\nimport java.text.*\nimport java.util.*\nimport java.util.concurrent.*\nimport java.util.function.*\nimport java.util.regex.*\nimport java.util.stream.*\nimport kotlin.collections.*\nimport kotlin.comparisons.*\nimport kotlin.io.*\nimport kotlin.jvm.*\nimport kotlin.jvm.functions.*\nimport kotlin.jvm.internal.*\nimport kotlin.ranges.*\nimport kotlin.sequences.*\nimport kotlin.text.*\n\n","kotlin_template_tail":"fun main(args: Array\u003cString\u003e) {\n    val a = readLine()!!.trimEnd().split(\" \").map{ it.toInt() }.toTypedArray()\n\n    val b = readLine()!!.trimEnd().split(\" \").map{ it.toInt() }.toTypedArray()\n\n    val result = compareTriplets(a, b)\n\n    println(result.joinToString(\" \"))\n}\n","hacker":{"id":15055,"username":"HackerRank","avatar":"https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png","is_admin":false},"body_html":"\u003cdiv class='challenge_problem_statement'\u003e\u003cdiv class='msB challenge_problem_statement_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eAlice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e to \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.487ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1501.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e for three categories: \u003cem\u003eproblem clarity\u003c/em\u003e, \u003cem\u003eoriginality\u003c/em\u003e, and \u003cem\u003edifficulty\u003c/em\u003e. \u003c/p\u003e\n\n\u003cp\u003eWe define the rating for Alice's challenge to be the triplet \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"19.263ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 8293.9 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(807,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1863,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2253,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2782,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3061,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3561,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3840,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4285,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4814,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5093,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5593,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5872,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6317,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6846,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7125,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7625,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7904,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, and the rating for Bob's challenge to be the triplet \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.334ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 7893.9 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(707,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1763,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2153,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2582,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2861,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3361,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3640,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4085,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4514,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4793,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5293,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5572,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6017,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6725,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7225,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7504,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003eYour task is to find their \u003cem\u003ecomparison points\u003c/em\u003e by comparing \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e with \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e with \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-8-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-9-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e with \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-10-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-11-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"9.518ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4098.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1153,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1709,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2766,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3195,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3474,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3819,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, then Alice is awarded \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-12-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e point. \u003c/li\u003e\n\u003cli\u003eIf \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-13-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"9.518ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4098.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1153,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1709,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2766,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3195,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3474,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3819,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, then Bob is awarded \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-14-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e point. \u003c/li\u003e\n\u003cli\u003eIf \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-15-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"9.518ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4098.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1153,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1709,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2766,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3195,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3474,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3819,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, then neither person receives a point.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eComparison points is the total points a person earned.\u003c/p\u003e\n\n\u003cp\u003eGiven \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-16-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.23ex\" height=\"1.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -576.1 529.5 721.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-17-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"0.998ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 429.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, determine their respective comparison points.\u003c/p\u003e\n\n\u003cp\u003eFor example, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-18-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.177ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4812.4 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(807,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1863,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2142,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2642,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3087,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3588,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4033,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4533,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-19-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.945ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4712.4 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(707,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1763,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2042,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2542,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2987,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3488,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3933,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4433,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.  For elements \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-20-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, Bob is awarded a point because \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-21-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.238ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4408.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1864,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2921,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3350,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3629,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4129,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.  For the equal elements \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-22-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-23-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, no points are earned.  Finally, for elements \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-24-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-25-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.238ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4408.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1864,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2921,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3350,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3629,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4129,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e so Alice receives a point.  Your return array would be \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-26-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.653ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2003.2 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(779,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1224,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1724,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e with Alice's score first and Bob's second.  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFunction Description\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eComplete the function \u003cem\u003ecompareTriplets\u003c/em\u003e in the editor below.  It must return an array of two integers, the first being Alice's score and the second being Bob's.  \u003c/p\u003e\n\n\u003cp\u003ecompareTriplets has the following parameter(s):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003ea\u003c/em\u003e: an array of integers representing Alice's challenge rating  \u003c/li\u003e\n\u003cli\u003e\u003cem\u003eb\u003c/em\u003e: an array of integers representing Bob's challenge rating  \u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_input_format'\u003e\u003cdiv class='msB challenge_input_format_title'\u003e\u003cp\u003e\u003cstrong\u003eInput Format\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_input_format_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eThe first line contains \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e space-separated integers, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.686ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1587 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, describing the respective values in triplet \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.23ex\" height=\"1.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -576.1 529.5 721.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e. \u003cbr\u003e\nThe second line contains \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e space-separated integers, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-8-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-9-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.454ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 1487 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(708,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1208,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, describing the respective values in triplet \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-10-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"0.998ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 429.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_constraints'\u003e\u003cdiv class='msB challenge_constraints_title'\u003e\u003cp\u003e\u003cstrong\u003eConstraints\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_constraints_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cul\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14.173ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 6102.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(778,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1834,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2364,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2642,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2988,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3544,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4600,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"13.94ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 6002.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(778,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1834,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2264,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2542,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2888,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3444,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4500,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_output_format'\u003e\u003cdiv class='msB challenge_output_format_title'\u003e\u003cp\u003e\u003cstrong\u003eOutput Format\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_output_format_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eReturn an array of two integers denoting the respective comparison points earned by Alice and Bob.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_sample_input'\u003e\u003cdiv class='msB challenge_sample_input_title'\u003e\u003cp\u003e\u003cstrong\u003eSample Input 0\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_sample_input_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003e5 6 7\u003c/span\u003e\n\u003cspan class=\"err\"\u003e3 6 10\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_sample_output'\u003e\u003cdiv class='msB challenge_sample_output_title'\u003e\u003cp\u003e\u003cstrong\u003eSample Output 0\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_sample_output_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"err\"\u003e1 1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_explanation'\u003e\u003cdiv class='msB challenge_explanation_title'\u003e\u003cp\u003e\u003cstrong\u003eExplanation 0\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_explanation_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eIn this example: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"29.726ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 12798.8 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(807,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1863,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2253,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2782,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3061,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3561,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3840,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4285,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4814,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5093,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5593,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5872,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6317,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6846,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7125,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7625,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7904,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(8571,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(9627,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(10017,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(10517,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(10963,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(11463,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(11908,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(12409,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"29.96ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 12899.3 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(707,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1763,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2153,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2582,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2861,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3361,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3640,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4085,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4514,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4793,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5293,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5572,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6017,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6725,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7225,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7504,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(8171,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(9227,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(9617,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(10117,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(10563,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(11063,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(11508,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(12509,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow, let's compare each individual score:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.238ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4408.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1864,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2921,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3350,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3629,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4129,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, so Alice receives \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e point.\u003c/li\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.238ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4408.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1864,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2921,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3350,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3629,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4129,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, so nobody receives a point.\u003c/li\u003e\n\u003cli\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.238ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4408.1 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(808,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1308,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1864,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2921,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3350,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3629,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4129,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, so Bob receives \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e point.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlice's comparison score is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-8-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, and Bob's comparison score is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-9-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e. Thus, we return the array \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-10-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.653ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2003.2 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(779,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1224,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1724,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.  \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_sample_input'\u003e\u003cdiv class='msB challenge_sample_input_title'\u003e\u003cp\u003e\u003cstrong\u003eSample Input 1\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_sample_input_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003e17 28 30\u003c/span\u003e\n\u003cspan class=\"err\"\u003e99 16 8\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_sample_output'\u003e\u003cdiv class='msB challenge_sample_output_title'\u003e\u003cp\u003e\u003cstrong\u003eSample Output 1\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_sample_output_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"err\"\u003e2 1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_explanation'\u003e\u003cdiv class='msB challenge_explanation_title'\u003e\u003cp\u003e\u003cstrong\u003eExplanation 1\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_explanation_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eComparing the \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.935ex\" height=\"2.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -1006.6 1263.8 1152.1\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(500,393)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(255,0)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e elements, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.748ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 3336.1 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cg transform=\"translate(1278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2335,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e so Bob receives a point. \u003cbr\u003e\nComparing the \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.759ex\" height=\"2.509ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -934.9 1188.1 1080.4\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(500,393)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(331,0)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.241ex\" height=\"2.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -1006.6 1395.3 1152.1\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(500,393)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(424,0)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e elements, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.748ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 3336.1 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cg transform=\"translate(1278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2335,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"6.586ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 2835.6 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cg transform=\"translate(1278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2335,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e so Alice receives two points. \u003cbr\u003e\nThe return array is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.653ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2003.2 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(779,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1224,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1724,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.  \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","author_name":"Shafaet","author_avatar":"https://hrcdn.net/s3_pub/hr-avatars/2f8155f1-c82d-4109-943c-3a45ceafb29e/150x150.png","version_ids":[],"bookmarked":false,"is_preview_contest":false,"visual_output_flag":false,"real_dynamic":false,"submitted_hackers_count":522273,"has_all_test_cases_public":false,"moderator_or_support":null}}