(function() {
	var JSONRequest = tinymce.util.JSONRequest, each = tinymce.each, DOM = tinymce.DOM;

	tinymce.create('tinymce.plugins.SpellcheckerPlugin', {
		getInfo : function() {
			return {
				longname : 'spellchecker.name',
				author : 'Moxiecode Systems AB',
				authorurl : 'http://tinymce.moxiecode.com',
				infourl : 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker',
				version : tinymce.majorVersion + "." + tinymce.minorVersion
			};
		},

		init : function(ed, url) {
			var t = this, cm;

			t.url = url;
			t.editor = ed;
			t.rpcUrl = ed.getParam("spellchecker_rpc_url", "{backend}");

			/** BB Code Begin: Defaults Spell Check to be on by default **/
			t.active = true;

			t.spellCheckCount = 0; // Count of concurrent spellcheck runs for this editor instance
			t.wlAlreadyChecked = []; // List of words already checked for this editor instance
			t.wlAlreadyMarked = []; // List of words already marked for errors for this editor instance
			/** BB Code End **/

			if (t.rpcUrl == '{backend}') {
				// Sniff if the browser supports native spellchecking (Don't know of a better way)
				if (tinymce.isIE)
					return;

				t.hasSupport = true;

				// Disable the context menu when spellchecking is active
				ed.onContextMenu.addToTop(function(ed, e) {
					if (t.active)
						return false;
				});
			}

			// Register commands
			ed.addCommand('mceSpellCheck', function() {
				if (t.rpcUrl == '{backend}') {
					// Enable/disable native spellchecker
					t.editor.getBody().spellcheck = t.active = !t.active;
					return;
				}

				/** BB code Begin **/

				t.active = !t.active;

				t.editor.nodeChanged();

        // 1. run spell check if spell check feature is being turned on
        // 2. clear misspelling markers if spell check feature is being turned off
        if ( t.active )
        {
          t._runSpellCheck();
        }
        else
        {
          t._removeWords(null, true);
        }

				/** BB code End **/
			});

			// Removes html markup used to highlight misspelled words - use before getting editor contents for storage
			ed.addCommand('clearSpellCheckMarkUp', function() {
				if (t.active)
					/** BB code Begin **/
					t._removeWords(null,true);
					/** BB code End **/
			});

			if (ed.settings.content_css !== false)
				ed.contentCSS.push(url + '/css/content.css');

      /** BB code Begin **/
      // Hide spellcheck context menu on the click event in editor
      ed.onClick.add( function ( ed, e )
      {
        if ( t._menu )
        {
          t._menu.hideMenu();
        }
      } );
      // Show spellcheck context menu when right clicked on spellcheck items
      ed.onContextMenu.add( function ( ed, e )
      {
        t._showMenu(ed, e);
      } );

	  // Runs Spell Check after each keystroke if Spell Check is on
      ed.onKeyUp.add( function ( ed, e )
      {
        if ( t.active && e.keyCode == 32 && !t._iqnoreKey( e.keyCode ) )
        {
          t._runSpellCheck();
        }
      } );
      /** BB code End **/
			ed.onNodeChange.add(function(ed, cm) {
				cm.setActive('spellchecker', t.active);
			});

			ed.onSetContent.add(function() {
				t._done();
			});

			ed.onBeforeGetContent.add(function() {
				t._done();
			});

			ed.onBeforeExecCommand.add(function(ed, cmd) {
				if (cmd == 'mceFullScreen')
					t._done();
			});

			// Find selected language
			t.languages = {};
			/** BB code Begin **/
			each(ed.getParam('spellchecker_languages', '', 'hash'), function(v, k) {
			/** BB code End **/
				if (k.indexOf('+') === 0) {
					k = k.substring(1);
					t.selectedLang = v;
				}

				t.languages[k] = v;
			});
			/** BB code Begin **/
			// if no language selected, then we set it to empty
			// Note: undefined will become string "null" at server side
			if(!t.selectedLang) {
				t.selectedLang = '';
			}
			/** BB code End **/
		},

		createControl : function(n, cm) {
			var t = this, c, ed = t.editor;


			if (n == 'spellchecker') {
				// Use basic button if we use the native spellchecker
				if (t.rpcUrl == '{backend}') {
					// Create simple toggle button if we have native support
					if (t.hasSupport)
						c = cm.createButton(n, {title : 'spellchecker.desc', cmd : 'mceSpellCheck', scope : t});

					return c;
				}

				c = cm.createSplitButton(n, {title : 'spellchecker.desc', cmd : 'mceSpellCheck', scope : t});

				c.onRenderMenu.add(function(c, m) {
					m.add({title : 'spellchecker.langs', 'class' : 'mceMenuItemTitle'}).setDisabled(1);
					t.menuItems = {};
					each(t.languages, function(v, k) {
						var o = {icon : 1}, mi;

						o.onclick = function() {
							if (v == t.selectedLang) {
								return;
							}
							t._updateMenu(mi);
							t.selectedLang = v;
              /** BB code Begin **/
              t._sendRPC('saveUserPreference', [t.selectedLang], function(r) {
                if (t.active)
                  {
                    t.editor.execCommand('mceSpellCheck');
                    t.editor.execCommand('mceSpellCheck');
                  }
              });
              /** BB code End **/
						};

						o.title = k;
						mi = m.add(o);
						mi.setSelected(v == t.selectedLang);
						t.menuItems[v] = mi;
						if (v == t.selectedLang)
							t.selectedItem = mi;
					});
				});



				return c;
			}
		},

		setLanguage: function(lang) {
			var t = this;

			if (lang == t.selectedLang) {
				// allowed
				return;
			}

			if (tinymce.grep(t.languages, function(v) { return v === lang; }).length === 0) {
				throw "Unknown language: " + lang;
			}

			t.selectedLang = lang;

			// if the menu has been shown, update it as well
			if (t.menuItems) {
				t._updateMenu(t.menuItems[lang]);
			}

			if (t.active) {
				// clear error in the old language.
				t._done();

				// Don't immediately block the UI to check spelling in the new language, this is an API not a user action.
			}
		},

		// Internal functions


		/** BB code Begin **/

		_iqnoreKey : function( keyPress ) {

			if ( keyPress == 37 // Right Arrow Key
				|| keyPress == 38 // Up Arrow Key
				|| keyPress == 39 // Left Arrow Key
				|| keyPress == 40 // Down Arrow Key
				|| keyPress == 45 // Insert Key
				)
				return true;

			return false;

		},

		_isSpellCheckRunning : function()
		{
		  var t = this;
          return ( t.spellCheckCount > 0 );
		},
		_registerSpellCheckRun : function()
		{
		  var t = this;
		  t.spellCheckCount++;
		},
		_unregisterSpellCheckRun : function()
		{
		  var t = this;
		  t.spellCheckCount--;
		},

		_runSpellCheck : function() {
			var t = this, ed = this.editor;

			if (t.active) {
				// If already running, wait for previous run to complete before posting the next
				if (t._isSpellCheckRunning()) {
					window.setTimeout(function() {
						t._runSpellCheck();
					}.bind(this), 100);
				} else {
					var words = t._getWords();
					if ( words && words.length > 0 ) {
						t._registerSpellCheckRun();
						t._sendRPC('checkWords', [t.selectedLang, words], function(r) {
							ed.focus();
							var bookMark = ed.selection.getBookmark();
							t._removeWords();
							if (r.length > 0) {
								each(r, function(word) {
									var i = t.wlAlreadyMarked.indexOf(word);
									if (i == -1) {
										t.wlAlreadyMarked.push(word);
									}
								});
							}
							t._markWords(t.wlAlreadyMarked);
							ed.selection.moveToBookmark(bookMark);
							t._unregisterSpellCheckRun();
						}, function() {
							t._unregisterSpellCheckRun();
						});
					}
				}
			} else {
				t._done();
			}
		},
		/** BB code End **/

		_updateMenu: function(mi) {
			mi.setSelected(1);
			this.selectedItem.setSelected(0);
			this.selectedItem = mi;
		},

		_walk : function(n, f) {
			var d = this.editor.getDoc(), w;

			if (d.createTreeWalker) {
				w = d.createTreeWalker(n, NodeFilter.SHOW_TEXT, null, false);

				while ((n = w.nextNode()) != null)
					f.call(this, n);
			} else
				tinymce.walk(n, f, 'childNodes');
		},

		_getSeparators : function() {
      /** BB code Begin **/
      var re = '', i, str = this.editor.getParam('spellchecker_word_separator_chars', '\\d\s!"#$%&()*+,-./:;<=>?@[\]^_{|}????????????????\u201d\u201c');
      /** BB code end  **/
			// Build word separator regexp
			for (i=0; i<str.length; i++)
				re += '\\' + str.charAt(i);

			return re;
		},

		_getWords : function() {
			var ed = this.editor, wl = [], tx = '', lo = {}, rawWords = [];
			/** BB code Begin **/
            lo = {"":1}; //local cache, pre-add empty element to prevent it from adding to checking list
			var t = this, finalWl = [];
			/** BB code End **/

			// Get area text
			this._walk(ed.getBody(), function(n) {
				if (n.nodeType == 3)
					tx += n.nodeValue + ' ';
			});

			// split the text up into individual words
			if (ed.getParam('spellchecker_word_pattern')) {
				// look for words that match the pattern
				rawWords = tx.match('(' + ed.getParam('spellchecker_word_pattern') + ')', 'gi');
			} else {
				// Split words by separator
				tx = tx.replace(new RegExp('([0-9]|[' + this._getSeparators() + '])', 'g'), ' ');
				tx = tinymce.trim(tx.replace(/(\s+)/g, ' '));
				/** BB code Begin **/
                if(tx) {
				/** BB code End **/
                    rawWords = tx.split(' ');
				/** BB code Begin **/
                }
				/** BB code End **/
			}
			
			/** BB Code Begin **/
			// Get the last word in the list
			var lastWord = '';
			if (rawWords.length > 0) {
				lastWord = rawWords[rawWords.length-1];
			}
			/** BB Code End **/

			// Build word array and remove duplicates
			each(rawWords, function(v) {
				if (!lo[v]) {
					wl.push(v);
					lo[v] = 1;
				}
			});
			
			/** BB Code Begin **/
			// Remove words that we checked previously
			each(wl, function(v) {
				var i = t.wlAlreadyChecked.indexOf(v);
				if (i == -1) {
					finalWl.push(v);
					t.wlAlreadyChecked.push(v);
				}
			});

			// If there is nothing to check means we have no new words. Add the last word to ensure its marked if misspelled.
			if (finalWl.length == 0 && lastWord) {
				finalWl.push(lastWord);
			}

			return finalWl;
			/** BB Code End **/
		},

		/** BB code Begin **/
		_removeWords : function(w,skipSetRange) {
		/** BB code End **/
			var ed = this.editor, dom = ed.dom, se = ed.selection, r = se.getRng(true);

			each(dom.select('span').reverse(), function(n) {
				if (n && (dom.hasClass(n, 'mceItemHiddenSpellWord') || dom.hasClass(n, 'mceItemHidden'))) {
					if (!w || dom.decode(n.innerHTML) == w)
						dom.remove(n, 1);
				}
			});

			/** BB code Begin **/
			// LRN-117129 fix an odd bug when auto-saving a test in IE 11 - if there are multiple editors on the same page,
			// after auto-saving the test the cursor is positioned at the beginning of the textbox area of the last editor
			if ( !tinyMCE.isIE11 || !skipSetRange )
			/** BB code End **/
			{
				se.setRng(r);
			}
		},

		_markWords : function(wl) {
			var ed = this.editor, dom = ed.dom, doc = ed.getDoc(), se = ed.selection, r = se.getRng(true), nl = [],
				w = wl.join('|'), re = this._getSeparators(), rx = new RegExp('(^|[' + re + '])(' + w + ')(?=[' + re + ']|$)', 'g');

			// Collect all text nodes
			this._walk(ed.getBody(), function(n) {
				if (n.nodeType == 3) {
					nl.push(n);
				}
			});

			// Wrap incorrect words in spans
			each(nl, function(n) {
				var node, elem, txt, pos, v = n.nodeValue;

				rx.lastIndex = 0;
				if (rx.test(v)) {
					// Encode the content
					v = dom.encode(v);
					// Create container element
					elem = dom.create('span', {'class' : 'mceItemHidden'});

					// Following code fixes IE issues by creating text nodes
					// using DOM methods instead of innerHTML.
					// Bug #3124: <PRE> elements content is broken after spellchecking.
					// Bug #1408: Preceding whitespace characters are removed
					// @TODO: I'm not sure that both are still issues on IE9.
					if (tinymce.isIE) {
						// Enclose mispelled words with temporal tag
					  var ieRx = new RegExp('\&\#39;', 'g');
					  v = v.replace(ieRx, "'");
						v = v.replace(rx, '$1<mcespell>$2</mcespell>');
						// Loop over the content finding mispelled words
						while ((pos = v.indexOf('<mcespell>')) != -1) {
							// Add text node for the content before the word
							txt = v.substring(0, pos);
							if (txt.length) {
								node = doc.createTextNode(dom.decode(txt));
								elem.appendChild(node);
							}
							v = v.substring(pos+10);
							pos = v.indexOf('</mcespell>');
							txt = v.substring(0, pos);
							v = v.substring(pos+11);
							// Add span element for the word
							elem.appendChild(dom.create('span', {'class' : 'mceItemHiddenSpellWord'}, txt));
						}
						// Add text node for the rest of the content
						if (v.length) {
							node = doc.createTextNode(dom.decode(v));
							elem.appendChild(node);
						}
					} else {
						/** BB code Begin **/
						// Decode the content
						v = dom.decode(v);
						/** BB code End **/
						// Other browsers preserve whitespace characters on innerHTML usage
						elem.innerHTML = v.replace(rx, '$1<span class="mceItemHiddenSpellWord">$2</span>');
					}

					// Finally, replace the node with the container
					dom.replace(elem, n);
				}
			});

			se.setRng(r);
		},

		_showMenu : function(ed, e) {
			var t = this, ed = t.editor, m = t._menu, p1, dom = ed.dom, vp = dom.getViewPort(ed.getWin()), wordSpan = e.target;


      /** BB code Begin **/
      //e == 2; // Fixes IE memory leak
			// e.button == 0 // left mouse click all browsers except IE. For IE this would be right click.
			// e.button == 2 // right mouse click  all browsers except IE. For IE this would be left click.
      if ( ( e.button != 0 && tinymce.isIE ) || ( e.button != 2 && !tinymce.isIE ) )
      {
        if ( m )
        {
          m.hideMenu();
        } 
        return;
      }
      /** BB code End **/

			if (!m) {
				m = ed.controlManager.createDropMenu('spellcheckermenu', {'class' : 'mceNoIcons'});
				t._menu = m;
			}

			if (dom.hasClass(wordSpan, 'mceItemHiddenSpellWord')) {
				m.removeAll();
				m.add({title : 'spellchecker.wait', 'class' : 'mceMenuItemTitle'}).setDisabled(1);

				t._sendRPC('getSuggestions', [t.selectedLang, dom.decode(wordSpan.innerHTML)], function(r) {
					var ignoreRpc;

					m.removeAll();

					if (r.length > 0) {
						m.add({title : 'spellchecker.sug', 'class' : 'mceMenuItemTitle'}).setDisabled(1);
						each(r, function(v) {
							m.add({title : v, onclick : function() {
								dom.replace(ed.getDoc().createTextNode(v), wordSpan);
								t._checkDone();
							}});
						});

						m.addSeparator();
					} else
						m.add({title : 'spellchecker.no_sug', 'class' : 'mceMenuItemTitle'}).setDisabled(1);

					if (ed.getParam('show_ignore_words', true)) {
						ignoreRpc = t.editor.getParam("spellchecker_enable_ignore_rpc", '');
						m.add({
							title : 'spellchecker.ignore_word',
							onclick : function() {
								var word = wordSpan.innerHTML;

								dom.remove(wordSpan, 1);
								t._checkDone();

								// tell the server if we need to
								if (ignoreRpc) {
									ed.setProgressState(1);
									t._sendRPC('ignoreWord', [t.selectedLang, word], function(r) {
										ed.setProgressState(0);
									});
								}
							}
						});

						m.add({
							title : 'spellchecker.ignore_words',
							onclick : function() {
								var word = wordSpan.innerHTML;

								t._removeWords(dom.decode(word));
								t._checkDone();

								// tell the server if we need to
								if (ignoreRpc) {
									ed.setProgressState(1);
									t._sendRPC('ignoreWords', [t.selectedLang, word], function(r) {
										ed.setProgressState(0);
									});
								}
							}
						});
					}

					if (t.editor.getParam("spellchecker_enable_learn_rpc")) {
						m.add({
							title : 'spellchecker.learn_word',
							onclick : function() {
								var word = wordSpan.innerHTML;

								dom.remove(wordSpan, 1);
								t._checkDone();

								ed.setProgressState(1);
								t._sendRPC('learnWord', [t.selectedLang, word], function(r) {
									ed.setProgressState(0);
								});
							}
						});
					}

					m.update();
				});

				p1 = DOM.getPos(ed.getContentAreaContainer());
				m.settings.offset_x = p1.x;
				m.settings.offset_y = p1.y;

				ed.selection.select(wordSpan);
				p1 = dom.getPos(wordSpan);
				m.showMenu(p1.x, p1.y + wordSpan.offsetHeight - vp.y);

				return tinymce.dom.Event.cancel(e);
			} else
				m.hideMenu();
		},

		_checkDone : function() {
			var t = this, ed = t.editor, dom = ed.dom, o;

			each(dom.select('span'), function(n) {
				if (n && dom.hasClass(n, 'mceItemHiddenSpellWord')) {
					o = true;
					return false;
				}
			});

			if (!o)
				t._done();
		},


		/** BB code _done function modified to implement real time Spell Check **/
		_done : function() {
			var t = this;

			if (t.active) {
				if (t._menu)
					t._menu.hideMenu();
			}
		},

		/** BB Code Begin **/
		_sendRPC : function(m, p, cb, errorcb) {
		/** BB Code End **/
			var t = this;

			JSONRequest.sendRPC({
				url : t.rpcUrl,
				method : m,
				params : p,
				success : cb,
				error : function(e, x) {
					/** BB Code Begin **/
					if (errorcb) {
						errorcb();
					}
					/** BB Code End **/
					t.editor.setProgressState(0);
					t.editor.windowManager.alert(e.errstr || ('Error response: ' + x.responseText));
				}
			});
		}
	});

	// Register plugin
	tinymce.PluginManager.add('spellchecker', tinymce.plugins.SpellcheckerPlugin);
})();
